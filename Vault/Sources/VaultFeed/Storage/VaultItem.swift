import Foundation
import FoundationExtensions
import VaultCore

/// A `VaultItem` retrieved from storage.
///
/// Includes the unique ID used to identify this item.
public struct VaultItem: Equatable, Hashable, Identifiable, Sendable {
    /// An item of data that can be stored in the Vault.
    public enum Payload: Equatable, Hashable, Sendable {
        case otpCode(OTPAuthCode)
        case secureNote(SecureNote)
    }

    /// Information about the stored item.
    public var metadata: Metadata
    /// The stored vault item.
    public var item: Payload

    public init(metadata: Metadata, item: Payload) {
        self.metadata = metadata
        self.item = item
    }

    public var id: UUID {
        metadata.id
    }

    /// Maps this object to a `VaultItem.Write` for writing.
    public var asWritable: VaultItem.Write {
        .init(
            userDescription: metadata.userDescription,
            color: metadata.color,
            item: item,
            tags: metadata.tags,
            visibility: metadata.visibility,
            searchableLevel: metadata.searchableLevel,
            searchPassphase: metadata.searchPassphrase
        )
    }
}

extension VaultItem.Payload {
    public var otpCode: OTPAuthCode? {
        switch self {
        case let .otpCode(otpCode):
            otpCode
        default:
            nil
        }
    }

    public var secureNote: SecureNote? {
        switch self {
        case let .secureNote(note):
            note
        default:
            nil
        }
    }
}

extension VaultItem {
    /// Common metadata for all stored vault items.
    public struct Metadata: Equatable, Hashable, Identifiable, Sendable {
        /// A unique ID to identify this specific `item`.
        ///
        /// This should be generated by the storage layer.
        public let id: UUID
        public let created: Date
        public var updated: Date
        /// User-provided description about the item.
        public var userDescription: String
        public var visibility: VaultItemVisibility
        public var searchableLevel: VaultItemSearchableLevel
        public var tags: Set<VaultItemTag.Identifier>
        public var searchPassphrase: String?
        /// The color tint for this item.
        public var color: VaultItemColor?

        public init(
            id: UUID,
            created: Date,
            updated: Date,
            userDescription: String,
            tags: Set<VaultItemTag.Identifier>,
            visibility: VaultItemVisibility,
            searchableLevel: VaultItemSearchableLevel,
            searchPassphrase: String?,
            color: VaultItemColor?
        ) {
            self.id = id
            self.created = created
            self.updated = updated
            self.userDescription = userDescription
            self.tags = tags
            self.visibility = visibility
            self.searchableLevel = searchableLevel
            self.searchPassphrase = searchPassphrase
            self.color = color
        }
    }
}

extension VaultItem {
    /// Model used for creating or updating a new `VaultItem`, where the `id` is predetermined/generated randomly.
    public struct Write: Equatable, Sendable {
        public var userDescription: String
        public var color: VaultItemColor?
        public var item: Payload
        public var tags: Set<VaultItemTag.Identifier>
        public var visibility: VaultItemVisibility
        public var searchableLevel: VaultItemSearchableLevel
        public var searchPassphase: String?

        public init(
            userDescription: String,
            color: VaultItemColor?,
            item: Payload,
            tags: Set<VaultItemTag.Identifier>,
            visibility: VaultItemVisibility,
            searchableLevel: VaultItemSearchableLevel,
            searchPassphase: String?
        ) {
            self.userDescription = userDescription
            self.color = color
            self.item = item
            self.tags = tags
            self.visibility = visibility
            self.searchableLevel = searchableLevel
            self.searchPassphase = searchPassphase
        }
    }
}
