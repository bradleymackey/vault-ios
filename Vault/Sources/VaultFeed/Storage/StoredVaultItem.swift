import Foundation
import FoundationExtensions
import VaultCore

/// A `VaultItem` retrieved from storage.
///
/// Includes the unique ID used to identify this item.
public struct StoredVaultItem: Equatable, Hashable, Identifiable, Sendable {
    /// Information about the stored item.
    public var metadata: Metadata
    /// The stored vault item.
    public var item: VaultItem

    public init(metadata: Metadata, item: VaultItem) {
        self.metadata = metadata
        self.item = item
    }

    public var id: UUID {
        metadata.id
    }

    /// Maps this object to a `StoredVaultItem.Write` for writing.
    public var asWritable: StoredVaultItem.Write {
        .init(
            userDescription: metadata.userDescription,
            color: metadata.color,
            item: item,
            visibility: metadata.visibility,
            searchableLevel: metadata.searchableLevel,
            searchPassphase: metadata.searchPassphrase
        )
    }
}

extension StoredVaultItem {
    /// Common metadata for all stored vault items.
    public struct Metadata: Equatable, Hashable, Identifiable, Sendable {
        /// A unique ID to identify this specific `item`.
        ///
        /// This should be generated by the storage layer.
        public let id: UUID
        public let created: Date
        public var updated: Date
        /// User-provided description about the item.
        public var userDescription: String
        public var visibility: Visibility
        public var searchableLevel: SearchableLevel
        public var searchPassphrase: String?
        /// The color tint for this item.
        public var color: VaultItemColor?

        public init(
            id: UUID,
            created: Date,
            updated: Date,
            userDescription: String,
            visibility: Visibility,
            searchableLevel: SearchableLevel,
            searchPassphrase: String?,
            color: VaultItemColor?
        ) {
            self.id = id
            self.created = created
            self.updated = updated
            self.userDescription = userDescription
            self.visibility = visibility
            self.searchableLevel = searchableLevel
            self.searchPassphrase = searchPassphrase
            self.color = color
        }
    }
}

extension StoredVaultItem.Metadata {
    public enum SearchableLevel: Equatable, Hashable, IdentifiableSelf, Sendable {
        /// The item cannot be searched for.
        case none
        /// All available data in the item can be searched for.
        case full
        /// Only the title of the item can be searched for.
        case onlyTitle
        /// A secret passphrase is required to search.
        case onlyPassphrase
    }

    public enum Visibility: Equatable, Hashable, IdentifiableSelf, Sendable {
        /// This item is always visible in the feed and in searches.
        case always
        /// This item is only visible when searching, according to the `SearchableLevel`
        case onlySearch
    }
}

extension StoredVaultItem {
    /// Model used for creating or updating a new `VaultItem`, where the `id` is predetermined/generated randomly.
    public struct Write: Equatable, Sendable {
        public var userDescription: String
        public var color: VaultItemColor?
        public var item: VaultItem
        public var visibility: Metadata.Visibility
        public var searchableLevel: Metadata.SearchableLevel
        public var searchPassphase: String?

        public init(
            userDescription: String,
            color: VaultItemColor?,
            item: VaultItem,
            visibility: Metadata.Visibility,
            searchableLevel: Metadata.SearchableLevel,
            searchPassphase: String?
        ) {
            self.userDescription = userDescription
            self.color = color
            self.item = item
            self.visibility = visibility
            self.searchableLevel = searchableLevel
            self.searchPassphase = searchPassphase
        }
    }
}
