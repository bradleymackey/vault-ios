import Foundation
import VaultCore

/// A `VaultItem` retrieved from storage.
///
/// Includes the unique ID used to identify this item.
public struct StoredVaultItem: Equatable, Hashable, Identifiable, Sendable {
    /// Information about the stored item.
    public var metadata: Metadata
    /// The stored vault item.
    public var item: VaultItem

    public init(metadata: Metadata, item: VaultItem) {
        self.metadata = metadata
        self.item = item
    }

    public var id: UUID {
        metadata.id
    }

    /// Maps this object to a `StoredVaultItem.Write` for writing.
    public var asWritable: StoredVaultItem.Write {
        .init(userDescription: metadata.userDescription, color: metadata.color, item: item)
    }
}

extension StoredVaultItem {
    /// Common metadata for all stored vault items.
    public struct Metadata: Equatable, Hashable, Identifiable, Sendable {
        /// A unique ID to identify this specific `item`.
        ///
        /// This should be generated by the storage layer.
        public let id: UUID
        public let created: Date
        public var updated: Date
        /// User-provided description about the item.
        public var userDescription: String?
        /// The color tint for this item.
        public var color: VaultItemColor?

        public init(id: UUID, created: Date, updated: Date, userDescription: String?, color: VaultItemColor?) {
            self.id = id
            self.created = created
            self.updated = updated
            self.userDescription = userDescription
            self.color = color
        }
    }
}

extension StoredVaultItem {
    /// Model used for creating or updating a new `VaultItem`, where the `id` is predetermined/generated randomly.
    public struct Write: Equatable, Sendable {
        public var userDescription: String?
        public var color: VaultItemColor?
        public var item: VaultItem

        public init(userDescription: String? = nil, color: VaultItemColor?, item: VaultItem) {
            self.userDescription = userDescription
            self.color = color
            self.item = item
        }
    }
}
